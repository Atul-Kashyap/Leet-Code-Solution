// Approach 1: Recursive
// Time Complexity :  O(R * C)
// Space Complexity : O(R * C)


class Solution {
public: 
    int area(vector<vector<int>> &grid, int x, int y){
        if(x < 0 || y < 0 || x >= grid.size() || y >= grid[0].size() || grid[x][y] == 0)
            return 0;
        grid[x][y] = 0;
        return (1 + area(grid, x, y+1) + area(grid, x+1, y) + area(grid, x, y-1) + area(grid, x-1, y));
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        int ans = 0;
        for(int i = 0; i < r; ++i){
            for(int j = 0; j < c; ++j){
                if(grid[i][j] == 1)
                    ans = max(ans, area(grid, i, j));
            }
        }
        return ans;
    }
};


// Approach 2: DFS
// Time Complexity : O(R * C)
// Space Complexity : O(R * C)

class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int r = grid.size();
        int c = grid[0].size();
        int dx[] = {0, 1, 0, -1};
        int dy[] = {1, 0, -1, 0};
        int area = 0;
        stack<pair<int,int>> st;
        for(int i = 0; i < r; ++i){
            for(int j = 0; j < c; ++j){
                if(grid[i][j] == 1){
                    int cnt = 0;
                    st.push({i,j});
                    grid[i][j] = 0;
                    while(!st.empty()){
                       pair<int, int> pos = st.top();
                       st.pop();   
                       int x = pos.first;
                       int y = pos.second;
                        cnt++;
                      for(int k = 0; k < 4; ++k){
                        if(x + dx[k] < r && y + dy[k] < c && x + dx[k] >= 0 && y + dy[k] >= 0 && grid[x+dx[k]][y+dy[k]] == 1){
                          grid[x+dx[k]][y+dy[k]] = 0;
                          st.push({x+dx[k], y+dy[k]});
                        }
                     }
                       
                  }
                 area = max(area, cnt);
                }
            }
        }
        return area;
    }
};





